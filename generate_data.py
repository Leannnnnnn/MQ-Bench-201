# Note: 新版本的训练数据生成代码，考虑主干节点，Resblock节点位宽设置，各cell独立分配量化位宽
# Date: 2024/04/13

import os
import re
import glob
import yaml
import torch
import pickle
import random
import torchvision
from torch import nn
from tqdm import tqdm
from nats_bench import create
from utils.model_utils import load_data, train_model, test_model, train_model_with_epoch_list, get_network, find_nor_conv_positions
from utils.bitassign_utils import MixBitAssign
from lib.utils.quantize_utils import calibrate




if __name__ == "__main__":
    # Prepare dataset
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--index', type=str, required=True, help='Model range, like 1-1000')
    parser.add_argument('--device', type=str, required=True, help='Device on which the models will be run, set 0 or 1')
    parser.add_argument('--total', type=int, default=50, help='The total number of model to train.')
    parser.add_argument('--cell_type', type=str, default='cell_group', help='The type of bitwidth assign in cell layers.', choices=['cell_group','cell_group_op_random','cell_uniform','cell_uniform_op_random','cell_separated','cell_separated_op_random', 'noquant']) # Raise error not in choice
    parser.add_argument('--stem_type', type=str, default='quant_8bit', help='The type of bitwidth assign in stem layers.', choices=['quant_8bit', 'quant_separated', 'noquant'])
    parser.add_argument('--calibrate', action='store_true', help='calibrte after quantization')

    args = parser.parse_args()
    if '-' in args.index:
        split_index = args.index.split('-')
    else:
        split_index = None
        model_index = int(args.index)

    # Use CUDA
    os.environ['CUDA_VISIBLE_DEVICES'] = args.device
    assert torch.cuda.is_available(), 'CUDA is needed for CNN'

    # 超参数设置
    H0 = {'dataset': 'cifar10','epochs': 200, 'lr': 0.1, 'batch_size': 256}
    H1 = {'dataset': 'cifar10','epochs': 200, 'lr': 0.05, 'batch_size': 256}
    H2 = {'dataset': 'cifar10','epochs': 150, 'lr': 0.01, 'batch_size': 256}
    H3 = {'dataset': 'cifar10','epochs': 150, 'lr': 0.01, 'batch_size': 1024}
    H5 = {'dataset': 'cifar100','epochs': 150, 'lr': 0.01, 'batch_size': 256}
    H6 = {'dataset': 'cifar100','epochs': 150, 'lr': 0.1, 'batch_size': 256}

    epoch_list = [50,100,150]

    total_model = args.total
    target_H = H2
    print(args)
    print('Train info: ',target_H)

    train_loader, valid_loader, test_loader = load_data('~/dataset', target_H)
    print('Dataset prepared.')

    api = create('/home/dell/dataset/NATS-tss-v1_0-3ffb9-full_cat/NATS-tss-v1_0-3ffb9-full', 'tss', fast_mode=True, verbose=False)

    yaml_path = '/home/dell/MP-NAS-Bench201/results/configs/'
    model_save_dir = '/home/dell/MP-NAS-Bench201/results/models'

    yaml_cache = {}

    cell_uniform_list_100_1 = [99, 289, 315, 631, 743, 806, 814, 1208, 1239, 1572, 1680, 1817, 1821, 2071, 2679, 2856, 2858, 2912, 2931, 
                             2986, 3461, 3521, 3800, 3826, 4139, 4156, 4166, 4367, 4472, 4811, 4950, 5009, 5468, 5823, 5883, 5896, 5922, 
                             6098, 6200, 6267, 6431, 6774, 6779, 6940, 7230, 7378, 7507, 7866, 8240, 8703, 8710, 8789, 8815, 8987, 9461, 
                             9667, 9694, 9773, 9791, 9964, 9971, 10095, 10113, 10155, 10171, 10296, 10695, 10885, 10937, 10992, 11403, 
                             11551, 11794, 11866, 12047, 12138, 12175, 12348, 12540, 12552, 12667, 12713, 12738, 12847, 12932, 12963, 12967, 
                             13121, 13186, 13502, 13788, 14230, 14252, 14337, 14878, 14928, 14972, 15002, 15121, 15579]

    cell_uniform_list_100_2 = [683, 815, 871, 1003, 1085, 1097, 1158, 1479, 1524, 1590, 1674, 1838, 1921, 2112, 2340, 2484, 2566, 2961, 
                               2974, 3067, 3224, 3277, 3477, 3567, 4064, 4168, 4202, 4524, 4576, 5146, 5165, 5226, 5376, 5555, 5753, 5809, 
                               5895, 6057, 6130, 6139, 6437, 6574, 6742, 6751, 6770, 7243, 7677, 7729, 7749, 7817, 8191, 8350, 8638, 8791, 
                               9036, 9104, 9150, 9483, 9580, 9706, 9805, 10217, 10327, 10458, 10597, 10642, 10734, 10865, 10972, 11122, 11141, 
                               11287, 11514, 11603, 11631, 11861, 11994, 12164, 12315, 12529, 12593, 12908, 12947, 13023, 13109, 13137, 13204, 
                               13645, 13661, 13879, 13924, 13929, 14367, 14639, 14850, 14951, 15141, 15347, 15418, 15624]

    cell_uniform_list_100_3 = [45, 64, 151, 161, 307, 326, 528, 571, 597, 864, 1014, 1250, 1634, 1668, 2090, 2297, 2523, 2632, 2718, 2735, 
                               2786, 2827, 2909, 2921, 3303, 3519, 4084, 4450, 4468, 4543, 4559, 5038, 5145, 5482, 5568, 5805, 5840, 5892, 
                               6289, 6383, 6634, 6669, 6735, 6790, 6953, 6982, 7111, 7256, 8034, 8379, 8713, 8807, 8853, 8921, 9039, 9120, 
                               9784, 9896, 9977, 10014, 10186, 10258, 10310, 10678, 10768, 10784, 11165, 11325, 11471, 11720, 11732, 11748, 
                               11766, 11926, 11996, 12029, 12030, 12057, 12199, 12206, 12306, 12327, 12338, 12578, 12731, 12772, 13024, 13133, 
                               13173, 13539, 13742, 13778, 14158, 14216, 14443, 14624, 14678, 14733, 14918, 15015]
    
    cell_uniform_list_100_4 = [295, 371, 382, 746, 854, 1155, 1280, 1448, 1552, 1747, 1758, 1840, 2000, 2021, 2592, 2940, 2987, 3044, 3051,
                            3142, 3552, 3713, 3825, 3871, 3982, 3990, 4178, 4445, 4866, 4891, 4952, 5006, 5105, 5435, 5557, 5815, 5909, 
                            6116, 6194, 6269, 6294, 6314, 6335, 6425, 6994, 7190, 7263, 7265, 7349, 7443, 7444, 7881, 8015, 8069, 8204, 
                            8296, 8338, 8340, 8531, 8560, 8707, 8889, 9032, 9351, 9353, 9355, 9494, 9585, 9944, 10223, 10240, 10303, 10917, 
                            10981, 11060, 11195, 11388, 11391, 11607, 11749, 11838, 12088, 12139, 12617, 12670, 12704, 12897, 12979, 13868, 
                            13875, 13902, 14004, 14056, 14162, 14274, 14713, 15065, 15188, 15207, 15234]
    
    cell_uniform_list_100_5 = [31, 177, 360, 379, 395, 429, 562, 646, 678, 1169, 1422, 1472, 1656, 1803, 1929, 2426, 2459, 2685, 2723, 2904, 
                           3325, 3766, 3766, 4305, 4453, 4596, 4927, 5140, 5183, 5205, 5283, 5309, 5488, 5931, 6158, 6207, 6291, 6570, 
                           6649, 6688, 6716, 6749, 6818, 6997, 7013, 7178, 7210, 7484, 7966, 8073, 8279, 8674, 9057, 9319, 9323, 9368, 
                           9677, 9855, 10087, 10114, 10285, 10446, 10615, 10774, 10814, 10966, 11279, 11314, 11477, 11661, 11671, 11678, 
                           11734, 11813, 12018, 12097, 12235, 12241, 12257, 12489, 12742, 12824, 12876, 13403, 13462, 13646, 13664, 13758, 
                           13863, 14280, 14280, 14435, 14437, 14722, 14913, 15343, 15449, 15558, 15560, 15605]
    
    cell_uniform_list_100_6 = [227, 257, 436, 473, 508, 725, 765, 766, 810, 840, 1187, 1312, 1388, 1617, 1713, 1810, 1883, 1946, 1953, 2074, 
                           2086, 2367, 2643, 2715, 3099, 3137, 3252, 3317, 3407, 3453, 3641, 3935, 3978, 4103, 4165, 4527, 4703, 4823, 4938, 
                           4976, 5021, 5396, 5454, 5467, 5501, 5800, 6076, 6209, 6246, 6315, 6432, 6721, 6863, 6875, 6965, 7054, 7390, 7858, 
                           8085, 8216, 8234, 8309, 8773, 9195, 9225, 9563, 9644, 9661, 9810, 9955, 9990, 10089, 10141, 10232, 10319, 10431, 10432, 
                           10653, 11773, 11815, 11958, 12079, 12503, 12968, 13163, 13385, 13692, 13718, 13886, 13913, 13913, 14003, 14057, 14622, 
                           14735, 14883, 14917, 15068, 15157, 15224]
    

    cell_uniform_list_200_7 = [620, 847, 848, 912, 930, 1216, 1425, 1441, 1459, 1469, 1721, 1820, 1925, 2054, 2057, 2084, 2111, 2217, 2309, 2428, 
                           2597, 2690, 2845, 2932, 3072, 3098, 3109, 3125, 3171, 3180, 3192, 3244, 3266, 3411, 3543, 3625, 3674, 3741, 3911, 3974, 
                           4010, 4108, 4114, 4150, 4154, 4204, 4218, 4238, 4302, 4321, 4332, 4392, 4395, 4418, 4421, 4637, 4897, 5107, 5137, 5139, 
                           5250, 5299, 5513, 5522, 5560, 5605, 5711, 5830, 5847, 5848, 5887, 6082, 6223, 6304, 6308, 6333, 6518, 6671, 6733, 6748, 
                           6807, 6846, 6851, 6883, 6913, 6961, 7045, 7059, 7095, 7109, 7118, 7162, 7192, 7288, 7292, 7321, 7337, 7354, 7591, 7662, 
                           7723, 7784, 7959, 7962, 8000, 8077, 8083, 8189, 8221, 8237, 8285, 8317, 8421, 8433, 8487, 8541, 8585, 8647, 8648, 8898, 
                           9125, 9234, 9395, 9450, 9458, 9476, 9547, 9646, 9813, 9983, 10042, 10401, 10427, 10436, 10467, 10559, 10596, 10624, 10633, 10638, 
                           10663, 10693, 10786, 10822, 10875, 10888, 11083, 11084, 11085, 11086, 11168, 11230, 11293, 11309, 11352, 11360, 11582, 11701, 11733, 11936, 
                           12090, 12099, 12450, 12506, 12509, 12728, 12822, 12945, 12989, 13029, 13266, 13365, 13505, 13779, 13810, 13903, 13927, 14008, 14264, 14380, 
                           14552, 14709, 14726, 14798, 14845, 14863, 14869, 14916, 15059, 15107, 15113, 15147, 15235, 15262, 15319, 15325, 15394, 15426, 15461, 15532]
    
    cell_uniform_list_100_8 = [8037, 8089, 8149, 8337, 8399, 8465, 8468, 8518, 8540, 8543, 8583, 8659, 8742, 8771, 9028, 9116, 9142, 9180, 9191, 9228, 9261, 9484, 9521, 
                           9521, 9568, 9659, 9764, 9882, 9893, 9927, 9941, 9948, 9970, 10135, 10174, 10321, 10449, 10526, 10590, 10738, 10747, 10753, 10935, 11074, 11125, 
                           11241, 11249, 11269, 11545, 11630, 11973, 12098, 12286, 12326, 12373, 12434, 12583, 12650, 12654, 12799, 12855, 12870, 12971, 12981, 13103, 13254, 
                           13374, 13461, 13547, 13572, 13792, 13941, 13992, 14022, 14047, 14067, 14082, 14116, 14202, 14399, 14472, 14490, 14498, 14548, 14572, 14574, 14671, 
                           14701, 14799, 14806, 14818, 14954, 14966, 15007, 15030, 15138, 15226, 15251, 15345, 15525]
    
    cell_uniform_list_500_9 = [5011, 5019, 5027, 5040, 5060, 5068, 5089, 5101, 5131, 5156, 5171, 5194, 5201, 5211, 5231, 5256, 5260, 5266, 5281, 5327, 5358, 5365, 5438, 
                           5441, 5483, 5490, 5547, 5548, 5553, 5558, 5563, 5571, 5586, 5599, 5633, 5685, 5747, 5793, 5794, 5807, 5841, 5864, 5880, 5890, 5897, 5914, 
                           5920, 5920, 5930, 5953, 6084, 6118, 6118, 6123, 6138, 6145, 6153, 6154, 6220, 6226, 6231, 6247, 6247, 6251, 6275, 6311, 6329, 6368, 6397, 
                           6409, 6466, 6491, 6557, 6594, 6601, 6628, 6652, 6664, 6668, 6682, 6701, 6703, 6714, 6731, 6757, 6761, 6771, 6792, 6793, 6827, 6843, 6852, 
                           6864, 6902, 6957, 6957, 6984, 6992, 7027, 7027, 7032, 7081, 7107, 7112, 7153, 7186, 7201, 7214, 7216, 7223, 7245, 7245, 7310, 7332, 7347, 
                           7422, 7440, 7456, 7471, 7479, 7480, 7490, 7504, 7511, 7511, 7523, 7527, 7571, 7632, 7639, 7657, 7717, 7737, 7739, 7739, 7743, 7753, 7763, 
                           7765, 7771, 7772, 7794, 7813, 7871, 7922, 7927, 7972, 8004, 8008, 8021, 8058, 8071, 8072, 8080, 8087, 8094, 8153, 8172, 8186, 8214, 8229, 
                           8263, 8283, 8297, 8307, 8313, 8327, 8348, 8360, 8366, 8401, 8493, 8510, 8514, 8542, 8552, 8562, 8582, 8593, 8605, 8650, 8658, 8669, 8691, 
                           8736, 8746, 8783, 8806, 8902, 8903, 8915, 8922, 8972, 8976, 8989, 9013, 9061, 9065, 9068, 9083, 9103, 9109, 9124, 9162, 9196, 9241, 9258, 
                           9275, 9278, 9328, 9331, 9362, 9363, 9370, 9377, 9383, 9410, 9438, 9518, 9527, 9536, 9550, 9566, 9628, 9632, 9703, 9735, 9751, 9766, 9785, 
                           9785, 9823, 9827, 9843, 9861, 9863, 9873, 9892, 9900, 9914, 9915, 9932, 9953, 9963, 9967, 9969, 9986, 9994, 9999, 10065, 10102, 10103, 10110, 
                           10147, 10166, 10182, 10192, 10237, 10257, 10259, 10337, 10337, 10343, 10343, 10359, 10402, 10452, 10464, 10464, 10476, 10481, 10482, 10512, 10535, 
                           10557, 10595, 10630, 10662, 10674, 10729, 10754, 10755, 10769, 10798, 10834, 10847, 10869, 10879, 10881, 10896, 10952, 10995, 11036, 11066, 11067, 
                           11078, 11096, 11100, 11102, 11110, 11128, 11150, 11184, 11198, 11226, 11262, 11310, 11313, 11322, 11356, 11366, 11378, 11385, 11418, 11431, 11440, 
                           11456, 11540, 11546, 11554, 11574, 11612, 11613, 11623, 11638, 11644, 11650, 11656, 11693, 11696, 11718, 11729, 11738, 11743, 11750, 11852, 11867, 
                           11883, 11976, 11982, 11987, 12011, 12017, 12049, 12056, 12146, 12152, 12171, 12190, 12200, 12238, 12273, 12281, 12281, 12296, 12312, 12344, 12361, 
                           12398, 12421, 12463, 12465, 12488, 12493, 12510, 12559, 12607, 12620, 12622, 12658, 12664, 12694, 12710, 12748, 12801, 12867, 12919, 12942, 12987, 
                           13007, 13009, 13016, 13031, 13036, 13046, 13056, 13104, 13162, 13174, 13190, 13201, 13220, 13221, 13245, 13258, 13286, 13296, 13307, 13338, 13352, 
                           13352, 13375, 13386, 13398, 13406, 13412, 13421, 13426, 13465, 13480, 13531, 13531, 13546, 13573, 13587, 13614, 13620, 13662, 13686, 13697, 13713, 
                           13732, 13745, 13824, 13827, 13841, 13907, 13961, 14030, 14048, 14081, 14086, 14127, 14142, 14142, 14154, 14170, 14172, 14183, 14191, 14200, 14200, 
                           14245, 14254, 14260, 14278, 14304, 14304, 14357, 14390, 14449, 14510, 14524, 14598, 14600, 14626, 14645, 14669, 14694, 14704, 14705, 14730, 14779, 
                           14813, 14821, 14837, 14874, 14929, 14934, 14960, 15008, 15027, 15029, 15038, 15048, 15069, 15076, 15078, 15133, 15158, 15202, 15206, 15213, 15216, 
                           15216, 15223, 15282, 15284, 15331, 15344, 15350, 15363, 15427, 15435, 15445, 15501, 15519, 15526, 15573, 15596]
    
    cell_uniform_list_500_10 = [6, 16, 22, 24, 47, 54, 59, 69, 116, 140, 149, 172, 189, 221, 276, 291, 341, 350, 353, 355, 373, 398, 400, 405, 428, 459, 465, 499, 518, 549, 551, 
                            557, 565, 599, 605, 607, 612, 613, 681, 698, 722, 731, 750, 754, 786, 793, 797, 800, 841, 850, 859, 868, 901, 924, 925, 943, 947, 987, 996, 1005, 
                            1013, 1020, 1063, 1069, 1070, 1072, 1111, 1125, 1140, 1148, 1163, 1166, 1167, 1168, 1172, 1175, 1179, 1203, 1204, 1209, 1213, 1217, 1231, 1259, 1291, 
                            1294, 1311, 1314, 1362, 1368, 1392, 1406, 1429, 1431, 1437, 1456, 1464, 1470, 1483, 1510, 1548, 1559, 1571, 1632, 1645, 1646, 1653, 1675, 1678, 1679, 
                            1694, 1722, 1723, 1727, 1748, 1763, 1782, 1785, 1804, 1818, 1846, 1852, 1858, 1860, 1871, 1890, 1891, 1895, 1909, 1917, 1955, 1966, 1974, 2003, 2028, 
                            2042, 2066, 2070, 2080, 2103, 2137, 2140, 2148, 2158, 2165, 2182, 2223, 2245, 2251, 2266, 2277, 2296, 2302, 2312, 2315, 2334, 2356, 2368, 2370, 2407, 
                            2468, 2489, 2491, 2498, 2505, 2531, 2550, 2557, 2567, 2568, 2580, 2601, 2614, 2620, 2627, 2655, 2656, 2666, 2689, 2744, 2747, 2753, 2755, 2772, 2780, 
                            2807, 2811, 2820, 2831, 2871, 2887, 2959, 2966, 2981, 2984, 2990, 3001, 3005, 3030, 3035, 3076, 3078, 3104, 3108, 3122, 3143, 3145, 3149, 3161, 3163, 
                            3214, 3251, 3332, 3338, 3346, 3358, 3362, 3371, 3374, 3381, 3399, 3408, 3421, 3454, 3457, 3483, 3496, 3500, 3503, 3505, 3516, 3517, 3518, 3542, 3553, 
                            3588, 3603, 3607, 3615, 3616, 3643, 3673, 3676, 3699, 3712, 3731, 3753, 3780, 3787, 3806, 3818, 3820, 3840, 3850, 3851, 3877, 3883, 3887, 3890, 3910, 
                            3923, 3927, 3948, 3964, 3999, 4015, 4026, 4031, 4045, 4057, 4071, 4076, 4079, 4119, 4140, 4170, 4199, 4209, 4217, 4231, 4240, 4251, 4260, 4273, 4286, 
                            4289, 4292, 4303, 4315, 4322, 4342, 4381, 4382, 4405, 4458, 4473, 4503, 4521, 4525, 4541, 4552, 4564, 4569, 4588, 4601, 4610, 4616, 4634, 4685, 4691, 
                            4715, 4717, 4725, 4746, 4758, 4808, 4828, 4829, 4832, 4835, 4852, 4853, 4860, 4872, 4882, 4884, 4887, 4954, 4988, 4995, 5026, 5065, 5087, 5111, 5126, 
                            5143, 5159, 5195, 5209, 5220, 5233, 5239, 5251, 5259, 5279, 5287, 5296, 5303, 5312, 5340, 5353, 5410, 5419, 5423, 5433, 5503, 5506, 5507, 5589, 5643, 
                            5683, 5698, 5700, 5739, 5748, 5769, 5784, 5786, 5812, 5819, 5829, 5845, 5851, 5852, 5868, 5874, 5882, 5904, 5912, 5916, 5934, 5980, 6002, 6029, 6047, 
                            6050, 6053, 6073, 6079, 6091, 6112, 6160, 6204, 6210, 6261, 6263, 6280, 6290, 6323, 6325, 6339, 6426, 6438, 6459, 6463, 6472, 6481, 6503, 6516, 6525, 
                            6543, 6552, 6600, 6605, 6611, 6621, 6645, 6653, 6691, 6709, 6734, 6776, 6784, 6800, 6814, 6817, 6820, 6879, 6893, 6898, 6958, 6971, 6986, 7001, 7010, 
                            7038, 7051, 7058, 7071, 7082, 7088, 7092, 7102, 7114, 7116, 7144, 7147, 7152, 7164, 7247, 7277, 7278, 7315, 7323, 7329, 7334, 7336, 7363, 7372, 7389, 
                            7395, 7402, 7405, 7412, 7429, 7439, 7442, 7447, 7465, 7485, 7494, 7508, 7539, 7541, 7552, 7567, 7599, 7602, 7629, 7645, 7646, 7699, 7709, 7725, 7734, 
                            7752, 7769, 7797, 7799, 7803, 7804, 7815, 7846, 7879, 7885, 7899, 7905, 7941, 7942, 7947]
    
    index_list_lower_0_6_212 = [151, 177, 315, 436, 528, 631, 646, 678, 683, 746, 765, 806, 864, 1003, 1014, 1097, 1155, 1158, 1208, 1239, 1312, 1422,
                             1448, 1552, 1634, 1747, 1758, 1817, 1838, 1929, 2000, 2021, 2071, 2112, 2340, 2426, 2459, 2592, 2643, 2679, 2715, 2723, 
                             2735, 2858, 2931, 2961, 2987, 3044, 3051, 3067, 3099, 3142, 3224, 3303, 3325, 3453, 3519, 3552, 3713, 3766, 3800, 4084, 
                             4103, 4166, 4168, 4472, 4524, 4576, 4596, 4703, 4811, 4823, 4891, 4950, 5006, 5145, 5146, 5205, 5309, 5435, 5501, 5753, 
                             5800, 5809, 5909, 6076, 6098, 6139, 6194, 6314, 6335, 6383, 6437, 6669, 6688, 6742, 6749, 6751, 6770, 6774, 6940, 7230, 
                             7265, 7378, 7484, 7677, 7817, 7858, 7866, 7881, 8015, 8069, 8073, 8191, 8240, 8338, 8340, 8350, 8379, 8674, 8710, 8713,  # 100
                             8789, 8815, 8889, 8921, 9039, 9057, 9150, 9319, 9323, 9355, 9368, 9461, 9563, 9585, 9644, 9667, 9694, 9773, 9944, 9964, 
                             9971, 10171, 10223, 10258, 10296, 10303, 10310, 10327, 10432, 10446, 10458, 10597, 10642, 10653, 10734, 10768, 10784, 10814, # 120
                             10865, 10972, 10981, 11122, 11141, 11314, 11325, 11403, 11477, 11603, 11607, 11678, 11732, 11766, 11794, 11813, 11838, 12030, 
                             12057, 12079, 12097, 12199, 12241, 12315, 12667, 12713, 12738, 12772, 12847, 12908, 12932, 12968, 12979, 13173, 13186, 13462, 
                             13661, 13664, 13742, 13758, 13788, 13886, 14252, 14280, 14437, 14722, 14913, 15015, 15068, 15207, 15234, 15579, 15624]

    index_list_lower_0_6_500 = [1435, 1443, 1444, 1448, 1456, 1458, 1466, 1471, 1473, 1474, 1476, 1477, 1479, 1480, 1483, 1488, 1490, 1500, 1501, 1502,
                                1504, 1505, 1506, 1509, 1518, 1524, 1526, 1528, 1531, 1533, 1534, 1539, 1540, 1542, 1546, 1547, 1550, 1551, 1552, 1553, 
                                1560, 1561, 1569, 1570, 1571, 1582, 1586, 1588, 1590, 1593, 1595, 1598, 1602, 1608, 1618, 1623, 1628, 1633, 1634, 1639, 
                                1642, 1648, 1651, 1655, 1663, 1667, 1670, 1671, 1672, 1674, 1676, 1677, 1680, 1684, 1685, 1688, 1689, 1695, 1699, 1703, 
                                1704, 1711, 1712, 1713, 1717, 1718, 1719, 1722, 1727, 1730, 1737, 1738, 1739, 1741, 1746, 1747, 1748, 1750, 1757, 1761, 
                                1765, 1766, 1767, 1768, 1770, 1773, 1774, 1777, 1779, 1801, 1802, 1803, 1811, 1817, 1819, 1821, 1822, 1826, 1829, 1833, 
                                1835, 1838, 1839, 1844, 1847, 1849, 1850, 1854, 1855, 1867, 1870, 1871, 1873, 1875, 1881, 1883, 1884, 1885, 1886, 1887, 
                                1888, 1889, 1890, 1891, 1895, 1898, 1904, 1905, 1907, 1908, 1914, 1919, 1922, 1924, 1925, 1929, 1930, 1942, 1944, 1946, 
                                1948, 1950, 1953, 1956, 1960, 1966, 1967, 1969, 1971, 1972, 1978, 1982, 1990, 1994, 1998, 1999, 2000, 2002, 2008, 2012, 
                                2017, 2020, 2021, 2024, 2027, 2031, 2036, 2041, 2043, 2044, 2051, 2052, 2054, 2060, 2062, 2071, 2072, 2074, 2076, 2077, 
                                2079, 2081, 2086, 2092, 2093, 2103, 2106, 2110, 2111, 2114, 2118, 2119, 2120, 2122, 2125, 2127, 2128, 2130, 2131, 2135, 
                                2138, 2140, 2141, 2145, 2149, 2150, 2156, 2161, 2168, 2175, 2177, 2183, 2185, 2190, 2194, 2195, 2198, 2204, 2205, 2206, 
                                2218, 2221, 2226, 2228, 2230, 2240, 2244, 2247, 2249, 2255, 2264, 2284, 2291, 2293, 2296, 2299, 2303, 2305, 2306, 2308, 
                                2309, 2315, 2317, 2318, 2325, 2330, 2337, 2340, 2349, 2351, 2361, 2367, 2373, 2378, 2379, 2382, 2393, 2408, 2409, 2412, 
                                2413, 2414, 2423, 2425, 2426, 2430, 2431, 2434, 2441, 2443, 2445, 2446, 2448, 2449, 2452, 2454, 2455, 2458, 2459, 2460, 
                                2465, 2467, 2474, 2475, 2477, 2486, 2487, 2490, 2498, 2501, 2502, 2509, 2512, 2520, 2523, 2524, 2537, 2539, 2542, 2543, 
                                2544, 2545, 2556, 2559, 2562, 2565, 2567, 2568, 2569, 2571, 2572, 2575, 2582, 2587, 2588, 2591, 2592, 2596, 2609, 2612, 
                                2617, 2620, 2621, 2622, 2623, 2625, 2630, 2632, 2633, 2643, 2656, 2659, 2661, 2664, 2668, 2669, 2673, 2674, 2678, 2679, 
                                2681, 2684, 2685, 2688, 2690, 2695, 2698, 2702, 2703, 2705, 2713, 2715, 2718, 2721, 2723, 2735, 2736, 2741, 2746, 2748, 
                                2754, 2761, 2770, 2774, 2780, 2783, 2786, 2796, 2797, 2800, 2805, 2806, 2808, 2812, 2818, 2829, 2833, 2840, 2846, 2856, 
                                2857, 2858, 2864, 2867, 2868, 2873, 2883, 2884, 2890, 2898, 2903, 2909, 2913, 2917, 2923, 2929, 2931, 2940, 2945, 2950, 
                                2955, 2961, 2973, 2979, 2983, 2986, 2987, 2993, 3004, 3006, 3023, 3041, 3044, 3051, 3052, 3053, 3057, 3064, 3067, 3071, 
                                3091, 3097, 3099, 3108, 3109, 3114, 3115, 3124, 3137, 3140, 3142, 3144, 3150, 3161, 3172, 3186, 3190, 3202, 3207, 3220, 
                                3221, 3223, 3224, 3227, 3228, 3231, 3239, 3241, 3242, 3243, 3245, 3249, 3252, 3266, 3268, 3269, 3270, 3274, 3277, 3278, 
                                3290, 3293, 3303, 3313, 3317, 3322, 3324, 3325, 3327, 3341, 3345, 3350, 3351, 3352, 3359, 3360, 3362, 3370, 3371, 3388, 
                                3392, 3406, 3407, 3414, 3417, 3421, 3423, 3437, 3446, 3450, 3452]


    index_list_lower_0_1__0_5_567 = [22, 24, 28, 44, 53, 75, 76, 83, 87, 94, 107, 113, 115, 126, 139, 151, 175, 177, 208, 231, 232, 239, 247, 267, 276, 279, 286, 291, 297, 302, 305, 319, 331, 332, 345, 349, 357, 363, 396, 401, 406, 414, 420, 423, 424, 432, 449, 465, 467, 468, 481, 526, 528, 530, 557, 563, 566, 569, 578, 583, 584, 599, 601, 614, 639, 646, 656, 670, 673, 676, 683, 693, 694, 696, 705, 710, 745, 746, 748, 757, 762, 776, 780, 792, 799, 806, 812, 830, 846, 850, 865, 876, 887, 901, 905, 913, 922, 926, 940, 946, 948, 954, 957, 1003, 1005, 1028, 1041, 1054, 1070, 1076, 1092, 1097, 1103, 1125, 1134, 1149, 1158, 1183, 1185, 1206, 1221, 1225, 1231, 1235, 1238, 1274, 1276, 1282, 1299, 1308, 1309, 1312, 1373, 1394, 1397, 1408, 1411, 1435, 1456, 1458, 1476, 1477, 1526, 1531, 1533, 1534, 1542, 1546, 1552, 1561, 1570, 1582, 1598, 1602, 1608, 1633, 1634, 1642, 1655, 1663, 1667, 1677, 1685, 1695, 1727, 1730, 1737, 1738, 1746, 1748, 1761, 1768, 1773, 1802, 1811, 1817, 1822, 1829, 1835, 1890, 1919, 1944, 1960, 1966, 1971, 1990, 1998, 1999, 2020, 2024, 2036, 2072, 2081, 2114, 2120, 2125, 2138, 2161, 2177, 2195, 2204, 2205, 2228, 2230, 2244, 2299, 2305, 2317, 2340, 2373, 2378, 2408, 2426, 2434, 2445, 2446, 2454, 2459, 2460, 2474, 2524, 2543, 2545, 2556, 2559, 2568, 2582, 2617, 2620, 2623, 2625, 2633, 2669, 2690, 2695, 2702, 2703, 2715, 2721, 2723, 2746, 2754, 2770, 2812, 2857, 2868, 2884, 2903, 2913, 2917, 2979, 2983, 3006, 3041, 3044, 3052, 3097, 3114, 3115, 3142, 3161, 3207, 3220, 3223, 3228, 3231, 3239, 3241, 3242, 3249, 3274, 3278, 3293, 3313, 3325, 3327, 3352, 3362, 3388, 3392, 3417, 3421, 3423, 3450, 3460, 3520, 3523, 3531, 3544, 3556, 3585, 3588, 3634, 3636, 3659, 3676, 3683, 3698, 3713, 3736, 3743, 3753, 3766, 3773, 3790, 3799, 3800, 3837, 3839, 3880, 3889, 3936, 3948, 4020, 4027, 4040, 4089, 4109, 4115, 4138, 4164, 4169, 4183, 4198, 4216, 4230, 4270, 4282, 4287, 4303, 4341, 4353, 4375, 4406, 4426, 4429, 4430, 4461, 4464, 4494, 4497, 4524, 4545, 4549, 4574, 4576, 4660, 4703, 4715, 4722, 4769, 4823, 4854, 4870, 4979, 5038, 5117, 5135, 5145, 5154, 5171, 5218, 5229, 5237, 5345, 5351, 5366, 5375, 5381, 5408, 5418, 5422, 5501, 5508, 5515, 5595, 5665, 5681, 5683, 5710, 5798, 5800, 5807, 5809, 5877, 5949, 6047, 6049, 6075, 6076, 6084, 6102, 6194, 6201, 6229, 6254, 6266, 6328, 6371, 6406, 6407, 6470, 6522, 6531, 6620, 6638, 6662, 6688, 6690, 6701, 6712, 6718, 6751, 6770, 6774, 6785, 6846, 6882, 6940, 7018, 7061, 7083, 7141, 7147, 7155, 7168, 7172, 7214, 7224, 7261, 7262, 7268, 7274, 7299, 7342, 7367, 7378, 7429, 7519, 7543, 7553, 7564, 7572, 7581, 7607, 7650, 7713, 7730, 7734, 7748, 7752, 7759, 7774, 7798, 7803, 7823, 7831, 7869, 7881, 7889, 7903, 7916, 7994, 8015, 8038, 8069, 8196, 8206, 8240, 8280, 8293, 8294, 8299, 8350, 8374, 8441, 8596, 8605, 8629, 8645, 8710, 8713, 8747, 8809, 8815, 8843, 8921, 8932, 8990, 9057, 9087, 9146, 9214, 9217, 9301, 9346, 9402, 9461, 9563, 9694, 9725, 9773, 9786, 9856, 9944, 10099, 10171, 10223, 10236, 10283, 10292, 10327, 10419, 10542, 10569, 10599, 10609, 10642, 10653, 10755, 10814, 10865, 10972, 11141, 11224, 11325, 11390, 11645, 11732, 11764, 11766, 11794, 11838, 11916, 11926, 12079, 12097, 12164, 12177, 12338, 12364, 12378, 12434, 12563, 12579, 12713, 12738, 12847, 12886, 12907, 12908, 12984, 13133, 13141, 13204, 13421, 13462, 13577, 13648, 13742, 13758, 13886, 13911, 14280, 14722, 15207, 15418]

    index_list_all = range(0,15625)

    if split_index is not None:
        choosen_index_list = index_list_all[int(split_index[0]): int(split_index[1])+1]
    else:
        choosen_index_list = [model_index]

    def get_cache():
        cache = {}

        # 使用glob找出所有匹配的文件
        pattern = os.path.join(yaml_path, '*_*.yaml')
        files = glob.glob(pattern)
        for file_path in files:
            match = re.search(r'([0-9]+_[0-9]+).yaml', file_path)
            if match:
                dict_idx = match.group(1)
                split = dict_idx.split('_')
                model_idx = int(split[0])
                filename = yaml_path+'{}.yaml'.format(dict_idx)
                if model_idx in choosen_index_list: 
                    with open(filename, 'r') as file:
                        table = yaml.safe_load(file)
                    cache[table['index']] = table
        return cache
        

    for try_get_model in range(args.total):
        print(args)
        yaml_cache = get_cache()
        print('Info: {} caches loaded.'.format(len(yaml_cache)))
        print('Info: Try to get model {}/{} times. '.format(try_get_model+1, total_model))
        if split_index is not None:
            index = random.randint(0, int(split_index[1])-int(split_index[0]))
            model_idx = choosen_index_list[index]
        else:
            model_idx = model_index
        count_model = 0
        for key in yaml_cache.keys():
            if int(key.split('_')[0]) == model_idx:
                count_model += 1
        
        if count_model >= 30:
            print('Info: Model {} has been trained {} times, skip.'.format(model_idx, count_model))
            continue

        # model_idx = 13539

        # 保证同一个模型仅训练一次
        # if model_idx in get_meta_key(pkl_path):
        #     print('Model {} is collected, regenerate.'.format(model_idx))
        #     continue

        info = api.query_by_index(model_idx, hp = 200)

        cell_arch_str = info.arch_str
        print('Arch: {}'.format(cell_arch_str))
        conv_positions = find_nor_conv_positions(cell_arch_str)

        model = get_network(api, model_idx, dataset = target_H['dataset'], quant = True)
        bit_assigner = MixBitAssign(model, model_idx, target_H, conv_positions, cell_arch_str, yaml_cache, yaml_path = yaml_path)
        epoch_trained = {}

        epoch_trained = bit_assigner.generate_random_bitwidth(cell_type = args.cell_type, stem_type = args.stem_type)  

        not_train = {}
        not_train_epoch_list = []
        
        dict_split = bit_assigner.get_dict_index().split('_')

        num = int(dict_split[1])
        for e in epoch_list:
            if e not in epoch_trained.keys():
                not_train[e] = dict_split[0] + '_' + str(num)
                not_train_epoch_list.append(e)
                num += 1
        not_train_epoch_list.sort()
        print('Set bit width: {}'.format(bit_assigner.config_table['bit_width'])) # 确保没有生成重复的位宽选项

        model = bit_assigner.get_model()

        if args.calibrate:
            bit_assigner.set_calibrate()
            model.cuda()
            model = calibrate(model, train_loader)

        epoch_result = train_model_with_epoch_list(model, target_H, model_save_dir, train_loader, valid_loader, test_loader, device = args.device, epoch_list = epoch_list, not_train = not_train, epoch_trained = epoch_trained, not_train_epoch_list = not_train_epoch_list)
        for e in epoch_result.keys():
            bit_assigner.save_to_yaml(epoch_result[e]['dict_name'], e, epoch_result[e]['val_acc'], epoch_result[e]['val_loss'], epoch_result[e]['test_acc'], epoch_result[e]['test_loss'])
            yaml_cache[epoch_result[e]['dict_name']] = bit_assigner.get_yaml_info()

        '''
        if len(not_train) > 0:
            print('Wait to train: ', not_train)
            for i, e in enumerate(epoch_list):
                if e in not_train.keys():
                    if i != 0: 
                        if epoch_list[i-1] not in not_train.keys():
                            load = (epoch_trained[epoch_list[i-1]], epoch_list[i-1])
                        else:
                            load = None
                    else:
                        load = None
                    target_H['epochs'] = e
                else:
                    continue

                print('Try to get model {}/{} times of index: {}'.format(try_get_model+1, total_model, not_train[e]))
                print(args)
                train_model(model, target_H, model_save_dir, train_loader, not_train[e], device = args.device, load = load)

                print('Validate model {}.'.format(not_train[e]))
                val_acc, val_loss = test_model(model, valid_loader, len(valid_loader)*target_H['batch_size'])

                print('Test model {}.'.format(not_train[e]))
                test_acc, test_loss = test_model(model, test_loader, len(test_loader)*target_H['batch_size'])
                
                bit_assigner.save_to_yaml(not_train[e], target_H['epochs'], val_acc, val_loss, test_acc, test_loss)
                yaml_cache[not_train[e]] = bit_assigner.get_yaml_info()

                epoch_trained[e] = not_train[e]
                del not_train[e]

        else:
            print('Exist all epoch choices, continue.')
            continue
        '''

